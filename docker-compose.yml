
services:

  redis:
    image: redis:7-alpine
    container_name: redis_storage
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - shared_logs:/var/log/redis
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3


  firewall:
    build: ./firewall
    container_name: firewall
    volumes:
      - ./firewall:/app
      - shared_logs:/app/shared_logs
    ports:
      - "${FIREWALL_PORT}:${FIREWALL_PORT}"
    networks:
      - net
    # depends_on:
      # redis:
        #Â condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DASHBOARD_PORT=${DASHBOARD_PORT}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - REDIS_PASSWORD=${REDIS_PASSWORD}


  reverse-proxy:
    build: ./reverse-proxy
    container_name: reverse-proxy
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./client:/usr/share/nginx/html/client:ro
      - shared_logs:/var/log/nginx
    ports:
      - "${REVERSE_PROXY_PORT}:${REVERSE_PROXY_PORT}"
    networks:
      - net
    depends_on:
      - client
      - server1
      - server2
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3


  client:
    build: ./client
    container_name: client
    expose:
      - "80"
    networks:
      - net

  client_terminal:
    build: ./client_terminal
    container_name: client_terminal
    volumes:
      - ./client_terminal:/app
    networks:
      - net
    depends_on:
      - firewall
    stdin_open: true
    tty: true
    profiles:
      - client_terminal


  server1:
    build: ./backend-servers/server
    container_name: server1
    volumes:
      - ./backend-servers/server:/app
      - shared_logs:/app/shared_logs
    expose:
      - "5000"
    networks:
      - net
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SERVER_ID=server1
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - BLACKLIST_THRESHOLD=${BLACKLIST_THRESHOLD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/status"]
      interval: 30s
      timeout: 3s
      retries: 3


  server2:
    build: ./backend-servers/server
    container_name: server2
    volumes:
      - ./backend-servers/server:/app
      - shared_logs:/app/shared_logs
    expose:
      - "5000"
    networks:
      - net
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SERVER_ID=server2
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - BLACKLIST_THRESHOLD=${BLACKLIST_THRESHOLD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/status"]
      interval: 30s
      timeout: 3s
      retries: 3


  file-receiver:
    build: ./file-receiver
    container_name: file-receiver
    volumes:
      - ./file-receiver:/app
      - ./file-receiver/uploads:/app/uploads
      - shared_logs:/app/shared_logs
    networks:
      - net
    depends_on:
      - firewall
      - redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379


  dashboard:
    build: ./dashboard
    container_name: dashboard
    volumes:
      - ./dashboard:/app
      - ./firewall:/app/logs/firewall:ro
      - ./file-receiver:/app/logs/file-receiver:ro
      - shared_logs:/app/shared_logs:ro
      - redis_data:/app/redis_data:ro
    ports:
      - "${DASHBOARD_PORT}:${DASHBOARD_PORT}"
    networks:
      - net
    depends_on:
      - firewall
      - file-receiver
      - redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379


  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"
    networks:
      - net
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - admin  # docker-compose --profile admin up


volumes:
  shared_logs:
    driver: local
  redis_data:
    driver: local

networks:
  net:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}