services:

  firewall:
    build:
      context: ./firewall
      dockerfile: Dockerfile
    container_name: firewall
    restart: unless-stopped
    volumes:
      - ./firewall:/app
      - shared_logs:/app/shared_logs
    ports:
      - "${FIREWALL_PORT}:${FIREWALL_PORT}"
    env_file:
      - .env
    networks:
      - clients

  reverse-proxy:
    build:
      context: ./reverse-proxy/
      dockerfile: Dockerfile
    container_name: reverse-proxy
    volumes:
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./client:/usr/share/nginx/html/client:ro
      - shared_logs:/var/log/nginx
    ports:
      - "${REVERSE_PROXY_PORT}:${REVERSE_PROXY_PORT}"
    networks:
      - clients
      - servers
    depends_on:
      client:
        condition: service_healthy
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${REVERSE_PROXY_PORT}"]
      interval: 30s
      timeout: 3s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis_storage
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
      - shared_logs:/var/log/redis
    networks:
      - servers
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  server:
    build:
      context: ./backend-servers/server/
      dockerfile: Dockerfile
    volumes:
      - ./backend-servers/server:/app
      - shared_logs:/app/shared_logs
    expose:
      - ${SERVER_PORT}
    networks:
      - servers
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/status"]
      interval: 30s
      timeout: 3s
      retries: 3

  client:
    build:
      context: ./client/
      dockerfile: Dockerfile
    container_name: client
    expose:
      - "${CLIENT_PORT}"
    networks:
      - clients
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CLIENT_PORT}"]
      interval: 30s
      timeout: 3s
      retries: 3

  client_terminal:
    build:
      context: ./client_terminal/
      dockerfile: Dockerfile
    container_name: client_terminal
    volumes:
      - ./client_terminal:/app
    networks:
      - clients
    depends_on:
      - firewall
    stdin_open: true
    tty: true
    profiles:
      - client_terminal

  dashboard:
    build:
      context: ./dashboard/
      dockerfile: Dockerfile
    container_name: dashboard
    volumes:
      - ./dashboard:/app
      - ./firewall:/app/logs/firewall:ro
      - ./file-receiver:/app/logs/file-receiver:ro
      - shared_logs:/app/shared_logs:ro
      - redis_data:/app/redis_data:ro
    expose:
      - ${DASHBOARD_PORT}
    networks:
      - clients
      - servers
    depends_on:
      - firewall
      - redis
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DASHBOARD_PORT}"]
      interval: 30s
      timeout: 3s
      retries: 3


volumes:
  shared_logs:
    driver: local
  redis_data:
    driver: local

networks:
  clients:
  servers: